---
- name: Create resource group
  azure_rm_resourcegroup:
    name: "{{resource_group}}"
    location: "{{location}}"
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"

- name: Create virtual network
  azure_rm_virtualnetwork:
    resource_group: "{{resource_group}}"
    name: "{{virtual_network}}"
    address_prefixes: "{{virtual_network_prefix}}"
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"

- name: Add subnet (VM)
  azure_rm_subnet:
    resource_group: "{{resource_group}}"
    name: "{{vpc_subnet}}"
    address_prefix: "10.0.1.0/24"
    virtual_network: "{{virtual_network}}"

- name: Add subnet (Bastion)
  azure_rm_subnet:
    resource_group: "{{resource_group}}"
    name: "{{bastion_subnet}}"
    address_prefix: "10.0.2.0/24"
    virtual_network: "{{virtual_network}}"

- name: Get facts about bastion subnet
  azure_rm_subnet_info:
    resource_group: "{{resource_group}}"
    virtual_network_name: "{{virtual_network}}"
    name: "{{bastion_subnet}}"
  register: "azure_bastion_subnet"


#- name: Show azure_bastion_subnet
#  debug:
#    msg: "{{azure_bastion_subnet}}"
    
- name: Set the bastion subnet ID using the fact we just grabbed
  set_fact:
    bastion_subnet_id: "{{azure_bastion_subnet.subnets[0].id}}"

#- name: Show bastion subnet ID
#  debug:
#    msg: "{{bastion_subnet_id}}"

    
- name: Create public IP address (VM)
  azure_rm_publicipaddress:
    resource_group: "{{resource_group}}"
    allocation_method: Static
    name: "{{vpc_public_ip}}"
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"
  register: output_ip_address

- name: Create public IP address (Bastion)
  azure_rm_publicipaddress:
    resource_group: "{{resource_group}}"
    name: "{{bastion_public_ip}}"
    sku: Standard
    allocation_method: Static
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"
  register: bastion_ip_address

- name: Get facts about bastion public IP
  azure_rm_publicipaddress_info:
    resource_group: "{{resource_group}}"
    name: "{{bastion_public_ip}}"
  register: "azure_bastion_publicip"

- name: Set the bastion publicipaddress ID using the fact we just grabbed
  set_fact:
    bastion_publicipaddress_id: "{{azure_bastion_publicip.publicipaddresses[0].id}}"

#- name: Show azure_bastion_publicip
#  debug:
#    msg: "{{azure_bastion_publicip}}"

#- name: Show bastion publicipaddress ID
#  debug:
#    msg: "{{bastion_publicipaddress_id}}"

- name: Output public IP
  debug:
    msg: "The public IP is {{ output_ip_address.state.ip_address }}"

- name: Output bastion IP
  debug:
    msg: "The public IP is {{ bastion_ip_address.state.ip_address }}"

- name: Create Network Security Group
  azure_rm_securitygroup:
    resource_group: "{{resource_group}}"
    name: "{{vpc_security_group}}"
    rules:
      - name: 'allow_rdp'
        protocol: Tcp
        source_address_prefix: "{{vpc_security_group_source}}"
        destination_port_range: 3389
        access: Allow
        priority: 1001
        direction: Inbound
      - name: 'allow_web_traffic'
        protocol: Tcp
        destination_port_range:
        - 80
        - 443
        access: Allow
        priority: 1002
        direction: Inbound
      - name: 'allow_powershell_remoting'
        protocol: Tcp
        source_address_prefix: "{{vpc_security_group_source}}"
        destination_port_range: 
          - 5985
          - 5986
        access: Allow
        priority: 1003
        direction: Inbound
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"

- name: Create a network interface
  azure_rm_networkinterface:
    name: "{{vm_networkinterface}}"
    resource_group: "{{resource_group}}"
    virtual_network: "{{virtual_network}}"
    subnet_name: "{{vpc_subnet}}"
    security_group: "{{vpc_security_group}}"
    ip_configurations:
      - name: default
        public_ip_address_name: "{{vpc_public_ip}}"
        primary: True
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"

- name: Create VM
  azure_rm_virtualmachine:
    resource_group: "{{resource_group}}"
    name: "{{vm}}"
    vm_size: Standard_DS1_v2
    admin_username: azureuser
    admin_password: "{{ password }}"
    network_interfaces: "{{vm_networkinterface}}"
    os_type: Windows
    image:
      offer: WindowsServer
      publisher: MicrosoftWindowsServer
      sku: 2019-datacenter-core
      version: latest
    tags:
      Name: "{{resource_group}}"
      ChargeTo: "{{charge_to}}"
      Owner: "{{owner}}"
      AutoStop: "2"
      AutoStart: "0"
  no_log: false

- name: Create bastion
  azure_rm_resource:
    resource_name: "{{bastion}}"
    resource_group: "{{resource_group}}"
    provider: network
    resource_type: bastionHosts
    body:
      location: "{{location}}"
      properties:
        ipconfigurations:
          - name: IpConf
            properties:
              subnet:
                id: "{{ bastion_subnet_id }}"
              publicipaddress:
                id: "{{ bastion_publicipaddress_id }}"
  
- name: Create VM script extension to enable HTTPS WinRM listener
  azure_rm_virtualmachineextension:
    name: winrm-extension
    resource_group: "{{resource_group}}"
    virtual_machine_name: "{{vm}}"
    publisher: Microsoft.Compute
    virtual_machine_extension_type: CustomScriptExtension
    type_handler_version: '1.9'
    settings: '{"fileUris": ["https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"],"commandToExecute": "powershell -ExecutionPolicy Unrestricted -File ConfigureRemotingForAnsible.ps1"}'
    auto_upgrade_minor_version: true

- name: Get facts for one Public IP
  azure_rm_publicipaddress_info:
    resource_group: "{{resource_group}}"
    name: "{{vpc_public_ip}}"
  register: publicipaddresses

- name: set public ip address fact
  set_fact: publicipaddress="{{ publicipaddresses | json_query('publicipaddresses[0].ip_address')}}"

- name: wait for the WinRM port to come online
  wait_for:
    port: 5986
    host: '{{ publicipaddress }}'
    timeout: 600

